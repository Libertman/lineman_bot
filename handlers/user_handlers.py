from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart, or_f
from lexicon.lexicon_ru import LEXICON_RU
from services.services import registration_of_deadlines
from keyboards.keyboards import functions_keyboard, help_start_keyboard, subjects_keyboard, pe_keyboard, economics_keyboard, russia_keyboard, digital_keyboard, english_keyboard
from database.database import deadlines
from services.services import translate_to_date
from datetime import datetime


router = Router()


@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer(LEXICON_RU['/start'], reply_markup=help_start_keyboard)
    await registration_of_deadlines(message)


@router.message(or_f(F.text == '–ü–æ–º–æ—â—å', F.text == '–ü–û–ú–û–ì–ò–¢–ï'))
async def process_help_command(message: Message):
    await message.answer(LEXICON_RU['/help'], reply_markup=functions_keyboard)


@router.message(F.text == '–î–ï–î–õ–ê–ô–ù–´ –ü–û –ü–†–ï–î–ú–ï–¢–ê–ú')
async def process_show_subjects_deadlines(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç", reply_markup=subjects_keyboard)


@router.message(F.text == '‚öΩÔ∏è–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞‚öΩÔ∏è')
async def process_pe_subject(message: Message):
    current_time = datetime.now()
    all_deadlines = '\n'.join([f"{index}. {deadline.name} -> {deadline.deadline.strftime('%d.%m.%y')}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(deadline.deadline - current_time)}\n\n" for index, deadline in enumerate(deadlines['–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞'], 1) if deadline.deadline > current_time]) + '\n'
    await message.answer(LEXICON_RU['pe_description'].format(all_deadlines), reply_markup=pe_keyboard)


@router.message(F.text == 'ü§ë–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞ü§ë')
async def process_economics_subject(message: Message):
    current_time = datetime.now()
    all_deadlines = '\n'.join([f"{index}. {deadline.name} -> {deadline.deadline.strftime('%d.%m.%y')}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(deadline.deadline - current_time)}\n\n" for index, deadline in enumerate(deadlines['–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞'], 1) if deadline.deadline > current_time]) + '\n'
    await message.answer(LEXICON_RU['economics_description'].format(all_deadlines), reply_markup=economics_keyboard)


@router.message(F.text == 'üíª–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—åüíª')
async def process_digital_subject(message: Message):
    current_time = datetime.now()
    all_deadlines = '\n'.join([f"{index}. {deadline.name} -> {deadline.deadline.strftime('%d.%m.%y')}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(deadline.deadline - current_time)}\n\n" for index, deadline in enumerate(deadlines['–¶–∏—Ñ—Ä–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å'], 1) if deadline.deadline > current_time]) + '\n'
    await message.answer(LEXICON_RU['digital_description'].format(all_deadlines), reply_markup=digital_keyboard)


@router.message(F.text == 'üá∫üá∏–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫üá∫üá∏')
async def process_english_subject(message: Message):
    current_time = datetime.now()
    all_deadlines = '\n'.join([f"{index}. {deadline.name} -> {deadline.deadline.strftime('%d.%m.%y')}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(deadline.deadline - current_time)}\n\n" for index, deadline in enumerate(deadlines['–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫'], 1) if deadline.deadline > current_time]) + '\n'
    await message.answer(LEXICON_RU['english_description'].format(all_deadlines), reply_markup=english_keyboard)


@router.message(F.text == 'üá∑üá∫–†–æ—Å—Å–∏—è: –≥–æ—Å. –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µüá∑üá∫')
async def process_russia_subject(message: Message):
    current_time = datetime.now()
    first_deadline = deadlines['–†–æ—Å—Å–∏—è: –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ'][0]
    all_deadlines = first_deadline.name + f' -> {first_deadline.deadline.strftime("%d.%m.%y")}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(first_deadline.deadline - current_time)}\n\n' if first_deadline.deadline > current_time else ''
    all_deadlines += '\n'.join([f"{index}. {deadline.name} -> {deadline.deadline.strftime('%d.%m.%y')}\n–û—Å—Ç–∞–ª–æ—Å—å: {translate_to_date(deadline.deadline - current_time)} \n\n" for index, deadline in enumerate(deadlines['–†–æ—Å—Å–∏—è: –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ'][1:], 9) if deadline.deadline > current_time])
    await message.answer(LEXICON_RU['–†–æ—Å—Å–∏—è: –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ—Å–Ω–æ–≤–∞–Ω–∏–µ –∏ –º–∏—Ä–æ–≤–æ–∑–∑—Ä–µ–Ω–∏–µ'].format(all_deadlines), reply_markup=russia_keyboard)


@router.message(F.photo)
async def process_photo_command(message: Message):
    await message.answer_photo('AgACAgIAAxkBAAOxZNy9k3OeJws7YoOYouRq3nuPDzAAAp3OMRt6ouBKOIxIA6inc1QBAAMCAAN5AAMwBAk')


@router.message(F.sticker)
async def process_sticker_command(message: Message):
    await message.answer_sticker('CAACAgIAAxkBAAO6ZNzAy6gWdfJeLtgN3bY4T3HcmsYAArYmAAIYKJFJVvHiKO8JxjUwBA')
